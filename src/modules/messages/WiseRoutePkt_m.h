//
// Generated file, do not edit! Created by nedtool 4.6 from messages/WiseRoutePkt.msg.
//

#ifndef _WISEROUTEPKT_M_H_
#define _WISEROUTEPKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "NetwPkt_m.h"
// }}

/**
 * Class generated from <tt>messages/WiseRoutePkt.msg:11</tt> by nedtool.
 * <pre>
 * message WiseRoutePkt extends NetwPkt
 * {
 *     int isFlood;
 *     LAddress::L3Type finalDestAddr;
 *     LAddress::L3Type initialSrcAddr;
 *     int nbHops;
 * }
 * </pre>
 */
class WiseRoutePkt : public ::NetwPkt
{
  protected:
    int isFlood_var;
    LAddress::L3Type finalDestAddr_var;
    LAddress::L3Type initialSrcAddr_var;
    int nbHops_var;

  private:
    void copy(const WiseRoutePkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiseRoutePkt&);

  public:
    WiseRoutePkt(const char *name=NULL, int kind=0);
    WiseRoutePkt(const WiseRoutePkt& other);
    virtual ~WiseRoutePkt();
    WiseRoutePkt& operator=(const WiseRoutePkt& other);
    virtual WiseRoutePkt *dup() const {return new WiseRoutePkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getIsFlood() const;
    virtual void setIsFlood(int isFlood);
    virtual LAddress::L3Type& getFinalDestAddr();
    virtual const LAddress::L3Type& getFinalDestAddr() const {return const_cast<WiseRoutePkt*>(this)->getFinalDestAddr();}
    virtual void setFinalDestAddr(const LAddress::L3Type& finalDestAddr);
    virtual LAddress::L3Type& getInitialSrcAddr();
    virtual const LAddress::L3Type& getInitialSrcAddr() const {return const_cast<WiseRoutePkt*>(this)->getInitialSrcAddr();}
    virtual void setInitialSrcAddr(const LAddress::L3Type& initialSrcAddr);
    virtual int getNbHops() const;
    virtual void setNbHops(int nbHops);
};

inline void doPacking(cCommBuffer *b, WiseRoutePkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WiseRoutePkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _WISEROUTEPKT_M_H_

